generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(uuid())
  spotifyId            String              @unique @map("spotify_id")
  email                String
  displayName          String              @map("display_name")
  spotifyAccessToken   String?             @map("spotify_access_token")
  spotifyRefreshToken  String?             @map("spotify_refresh_token")
  tokenExpiresAt       DateTime?           @map("token_expires_at")
  createdAt            DateTime            @default(now()) @map("created_at")
  playlists            Playlist[]
  generatedPlaylists   GeneratedPlaylist[]
  chatMessages         ChatMessage[]
  accounts             Account[]
  sessions             Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Playlist {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  spotifyId   String   @map("spotify_id")
  name        String
  description String?
  imageUrl    String?  @map("image_url")
  trackCount  String   @map("track_count")
  isOwner     Boolean  @default(false) @map("is_owner")
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, spotifyId])
  @@map("playlists")
}

model GeneratedPlaylist {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  name              String
  description       String?
  spotifyPlaylistId String?  @map("spotify_playlist_id")
  sourcePlaylistIds Json     @map("source_playlist_ids")
  tracks            Json
  aiPrompt          String?  @map("ai_prompt") @db.Text
  createdAt         DateTime @default(now()) @map("created_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("generated_playlists")
}

model ChatMessage {
  id                   String   @id @default(uuid())
  userId               String   @map("user_id")
  role                 String
  content              String   @db.Text
  playlistGenerationId String?  @map("playlist_generation_id")
  createdAt            DateTime @default(now()) @map("created_at")
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}
