export const runtime = "nodejs";

import type { NextRequest } from "next/server";
import { auth } from "@/lib/auth";
import { prisma } from "@/lib/prisma";
import { spotifyFetch } from "@/lib/spotify-client";

export async function POST(req: NextRequest, { params }: { params: { id: string } }) {
	try {
		const session = await auth();
		if (!session?.user?.id) {
			return new Response(JSON.stringify({ error: "Unauthorized" }), {
				status: 401,
				headers: { "Content-Type": "application/json" },
			});
		}

		const userId = session.user.id;
		const genId = params.id;

		// Fetch the generated playlist
		const generated = await prisma.generatedPlaylist.findUnique({
			where: { id: genId },
		});

		if (!generated || generated.userId !== userId) {
			return new Response(JSON.stringify({ error: "Generated playlist not found" }), {
				status: 404,
				headers: { "Content-Type": "application/json" },
			});
		}

		if (generated.spotifyPlaylistId) {
			return new Response(
				JSON.stringify({
					error: "Playlist already saved to Spotify",
					spotifyPlaylistId: generated.spotifyPlaylistId,
				}),
				{
					status: 400,
					headers: { "Content-Type": "application/json" },
				}
			);
		}

		// Get current user's Spotify profile
		const meRes = await spotifyFetch(userId, "https://api.spotify.com/v1/me");
		if (!meRes.ok) {
			return new Response(JSON.stringify({ error: "Failed to fetch user profile from Spotify" }), {
				status: 502,
				headers: { "Content-Type": "application/json" },
			});
		}
		const me = await meRes.json();

		// Create playlist on Spotify
		const createRes = await spotifyFetch(userId, `https://api.spotify.com/v1/users/${me.id}/playlists`, {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({
				name: generated.name,
				description: generated.description || "Generated by PlaylistGenius AI",
				public: false,
			}),
		});

		if (!createRes.ok) {
			const errorText = await createRes.text();
			console.error("Failed to create Spotify playlist:", errorText);
			return new Response(JSON.stringify({ error: "Failed to create playlist on Spotify" }), {
				status: 502,
				headers: { "Content-Type": "application/json" },
			});
		}

		const created = await createRes.json();

		// Add tracks to the playlist
		const tracks = generated.tracks as any[];
		const trackUris = tracks.filter(track => track?.uri).map(track => track.uri);

		if (trackUris.length > 0) {
			// Spotify allows max 100 tracks per request
			const chunkSize = 100;
			for (let i = 0; i < trackUris.length; i += chunkSize) {
				const chunk = trackUris.slice(i, i + chunkSize);
				const addRes = await spotifyFetch(userId, `https://api.spotify.com/v1/playlists/${created.id}/tracks`, {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify({ uris: chunk }),
				});

				if (!addRes.ok) {
					const errorText = await addRes.text();
					console.error("Failed to add tracks to playlist:", errorText);
					// Don't fail completely, just log the error
				}
			}
		}

		// Update the generated playlist record
		await prisma.generatedPlaylist.update({
			where: { id: genId },
			data: { spotifyPlaylistId: created.id },
		});

		return Response.json({
			success: true,
			spotifyPlaylistId: created.id,
			spotifyUrl: created.external_urls?.spotify,
			message: "Playlist saved to Spotify successfully",
		});
	} catch (error) {
		console.error("Error saving playlist to Spotify:", error);
		return new Response(
			JSON.stringify({
				error: "Failed to save playlist to Spotify",
				details: error instanceof Error ? error.message : "Unknown error",
			}),
			{
				status: 500,
				headers: { "Content-Type": "application/json" },
			}
		);
	}
}
